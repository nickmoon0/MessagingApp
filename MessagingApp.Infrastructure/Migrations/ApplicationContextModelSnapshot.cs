// <auto-generated />
using System;
using MessagingApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MessagingApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MessagingApp.Application.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("MessagingApp.Domain.Aggregates.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("MessagingApp.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MessagingApp.Domain.Entities.FriendRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ReceivingUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SendingUserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivingUserId");

                    b.HasIndex("SendingUserId");

                    b.ToTable("FriendRequest", (string)null);
                });

            modelBuilder.Entity("MessagingApp.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MessageConversationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SendingUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MessageConversationId");

                    b.HasIndex("SendingUserId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("UserConversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConversation");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<Guid>("FriendsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("FriendsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFriend", (string)null);
                });

            modelBuilder.Entity("MessagingApp.Application.Models.RefreshToken", b =>
                {
                    b.HasOne("MessagingApp.Domain.Aggregates.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MessagingApp.Domain.Entities.FriendRequest", b =>
                {
                    b.HasOne("MessagingApp.Domain.Aggregates.User", "ReceivingUser")
                        .WithMany("ReceivedFriendRequests")
                        .HasForeignKey("ReceivingUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MessagingApp.Domain.Aggregates.User", "SendingUser")
                        .WithMany("SentFriendRequests")
                        .HasForeignKey("SendingUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReceivingUser");

                    b.Navigation("SendingUser");
                });

            modelBuilder.Entity("MessagingApp.Domain.Entities.Message", b =>
                {
                    b.HasOne("MessagingApp.Domain.Aggregates.Conversation", "MessageConversation")
                        .WithMany("Messages")
                        .HasForeignKey("MessageConversationId");

                    b.HasOne("MessagingApp.Domain.Aggregates.User", "SendingUser")
                        .WithMany()
                        .HasForeignKey("SendingUserId");

                    b.Navigation("MessageConversation");

                    b.Navigation("SendingUser");
                });

            modelBuilder.Entity("UserConversation", b =>
                {
                    b.HasOne("MessagingApp.Domain.Aggregates.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MessagingApp.Domain.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("MessagingApp.Domain.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MessagingApp.Domain.Aggregates.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessagingApp.Domain.Aggregates.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MessagingApp.Domain.Aggregates.User", b =>
                {
                    b.Navigation("ReceivedFriendRequests");

                    b.Navigation("SentFriendRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
